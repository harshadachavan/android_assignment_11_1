Q 1. What is the use of SQLite open helper class inSQLite?
Ans. For maximum control over local data, developers can use SQLite directly by leveraging SQLiteOpenHelper for executing SQL requests and managing a local database.

We need to write our own class to handle database operations such as creation, upgrading, reading and writing. Database operations are defined using the SQLiteOpenHelper:

		public class PostsDatabaseHelper extends SQLiteOpenHelper {
			// Database Info
			private static final String DATABASE_NAME = "postsDatabase";
			private static final int DATABASE_VERSION = 1;

			// Table Names
			private static final String TABLE_POSTS = "posts";
			private static final String TABLE_USERS = "users";

			// Post Table Columns
			private static final String KEY_POST_ID = "id";
			private static final String KEY_POST_USER_ID_FK = "userId";
			private static final String KEY_POST_TEXT = "text";

			// User Table Columns
			private static final String KEY_USER_ID = "id";
			private static final String KEY_USER_NAME = "userName";
			private static final String KEY_USER_PROFILE_PICTURE_URL = "profilePictureUrl";

			public PostsDatabaseHelper(Context context) {
				super(context, DATABASE_NAME, null, DATABASE_VERSION);
			}
			
			// Called when the database connection is being configured.
			// Configure database settings for things like foreign key support, write-ahead logging, etc.
			@Override
			public void onConfigure(SQLiteDatabase db) {
				super.onConfigure(db);
				db.setForeignKeyConstraintsEnabled(true);
			}

			// Called when the database is created for the FIRST time.
			// If a database already exists on disk with the same DATABASE_NAME, this method will NOT be called.
			@Override
			public void onCreate(SQLiteDatabase db) {
				String CREATE_POSTS_TABLE = "CREATE TABLE " + TABLE_POSTS +
						"(" +
							KEY_POST_ID + " INTEGER PRIMARY KEY," + // Define a primary key
							KEY_POST_USER_ID_FK + " INTEGER REFERENCES " + TABLE_USERS + "," + // Define a foreign key
							KEY_POST_TEXT + " TEXT" +
						")";

				String CREATE_USERS_TABLE = "CREATE TABLE " + TABLE_USERS +
						"(" +
							KEY_USER_ID + " INTEGER PRIMARY KEY," +
							KEY_USER_NAME + " TEXT," +
							KEY_USER_PROFILE_PICTURE_URL + " TEXT" +
						")";

				db.execSQL(CREATE_POSTS_TABLE);
				db.execSQL(CREATE_USERS_TABLE);
			}
			
			// Called when the database needs to be upgraded.
			// This method will only be called if a database already exists on disk with the same DATABASE_NAME,
			// but the DATABASE_VERSION is different than the version of the database that exists on disk.
			@Override
			public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
				if (oldVersion != newVersion) {
					// Simplest implementation is to drop all old tables and recreate them
					db.execSQL("DROP TABLE IF EXISTS " + TABLE_POSTS);
					db.execSQL("DROP TABLE IF EXISTS " + TABLE_USERS);
					onCreate(db);
				}
			}
		}
-----------------------------------------------------------------------------------------------------------------------------

Q 2. What is the use of OnUpgrade function in SQLiteOpenHelper class?
Ans. onUpgrade is basically for handling new db changes(could be new columns addition,table addition) for any new version of your app.
	 Droping the table is not always necessary in onUpgrade it all depends on what your use case is. If the requirment is to not to persists the data from your older version of app then drop should help,but if its like changing schema then it should only have alter scripts.
	 
	 Example : 
           public class SQLiteHelper extends SQLiteOpenHelper 
           { 
                 public SQLiteHelper(Context context) 
                 {         
                        super(context, DATABASE_NAME, null, DATABASE_VERSION);     
                 } 
 
                //database values 
                private static final String DATABASE_NAME = "demoApp.db";     
                private static final int DATABASE_VERSION = 1;     
                public static final String COLUMN_ID      = "_id"; 
 
               //team table     
               public static final String TABLE_TEAM = "team";      
               public static final String COLUMN_MASCOT = "mascot";     
               public static final String COLUMN_CITY = "city"; 
 
               public static final String DATABASE_CREATE_TEAM = "create table " + TABLE_TEAM + "(" +COLUMN_ID + " integer primary key autoincrement, "+ COLUMN_NAME + " string, "+ COLUMN_MASCOT + " string,"+ COLUMN_CITY + " string)"; 
 
               @Override     
               public void onCreate(SQLiteDatabase db) 
               {         
                     db.execSQL(DATABASE_CREATE_TEAM);     
               } 
 
               @Override     
               public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) 
               {         
                     db.execSQL("DROP TABLE IF EXISTS " + TABLE_TEAM);         
                     onCreate(db);     
                } 
         }

	 
-----------------------------------------------------------------------------------------------------------------------------

Q 3. How to show SQLite database table information in Android application what is the best way to do it?
Ans. We have to use table layout with cursor.  Showing database information will be better suited with table layout.
